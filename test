import pygame as pg
from random import randint

# Basic settings
WIDTH, HEIGHT = 800, 600  # Increased screen size
FPS = 60
GRAVITY = 0.6
JUMP_STRENGTH = -10
PIPE_GAP = 200  # Increased pipe gap to match larger screen
PIPE_WIDTH = 80
PIPE_SPEED = 3

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

class Player(pg.sprite.Sprite):
    def __init__(self, game):
        super().__init__()
        self.game = game
        self.image = pg.Surface((40, 30))
        self.image.fill(BLUE)
        self.rect = self.image.get_rect(center=(WIDTH / 4, HEIGHT / 2))
        self.vel_y = 0

    def update(self):
        self.vel_y += GRAVITY
        keys = pg.key.get_pressed()
        if keys[pg.K_SPACE]:
            self.vel_y = JUMP_STRENGTH
        self.rect.y += self.vel_y
        if self.rect.top < 0 or self.rect.bottom > HEIGHT:
            self.game.running = False

class Pipe(pg.sprite.Sprite):
    def __init__(self, game, x, y, is_top):
        super().__init__()
        self.game = game
        self.image = pg.Surface((PIPE_WIDTH, HEIGHT))
        self.image.fill(GREEN)
        self.rect = self.image.get_rect(topleft=(x, y if is_top else y + PIPE_GAP))
        self.is_top = is_top

    def update(self):
        self.rect.x -= PIPE_SPEED
        if self.rect.right < 0:
            self.kill()

class Game:
    def __init__(self):
        pg.init()
        self.screen = pg.display.set_mode((WIDTH, HEIGHT))
        pg.display.set_caption("Flappy Bird by Riley")
        self.clock = pg.time.Clock()
        self.running = True

    def new(self):
        self.all_sprites = pg.sprite.Group()
        self.pipes = pg.sprite.Group()
        self.player = Player(self)
        self.all_sprites.add(self.player)
        self.pipe_timer = 0

    def run(self):
        while self.running:
            self.clock.tick(FPS)
            self.events()
            self.update()
            self.draw()

    def events(self):
        for event in pg.event.get():
            if event.type == pg.QUIT:
                self.running = False

    def update(self):
        self.all_sprites.update()
        self.pipe_timer += 1
        if self.pipe_timer > 100:
            self.create_pipes()
            self.pipe_timer = 0

        # Check for collisions
        if pg.sprite.spritecollide(self.player, self.pipes, False):
            self.running = False

    def create_pipes(self):
        gap_y = randint(100, HEIGHT - 200)
        top_pipe = Pipe(self, WIDTH, gap_y - HEIGHT, is_top=True)
        bottom_pipe = Pipe(self, WIDTH, gap_y + PIPE_GAP, is_top=False)
        self.all_sprites.add(top_pipe, bottom_pipe)
        self.pipes.add(top_pipe, bottom_pipe)

    def draw(self):
        self.screen.fill(BLACK)
        self.all_sprites.draw(self.screen)
        pg.display.flip()

if __name__ == "__main__":
    g = Game()
    g.new()
    g.run()
    pg.quit()

 